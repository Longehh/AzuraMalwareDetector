package net.azurax.malware.checks;

import net.azurax.malware.api.check.IMalwareCheck;
import net.azurax.malware.result.Result;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

import java.io.File;
import java.util.Enumeration;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

public class SystemCheck implements IMalwareCheck {

    @Override
    public Result isMalware(File file) {
        if (!file.getName().contains(".jar")) {
            return new Result();
        }
        try (JarFile jarFile = new JarFile(file)) {
            Enumeration<JarEntry> entry = jarFile.entries();
            while (entry.hasMoreElements()) {
                JarEntry jarEntry = entry.nextElement();
                if (!jarEntry.getName().contains(".class")) {
                    continue;
                }
                ClassNode classNode = new ClassNode();
                ClassReader classReader = new ClassReader(jarFile.getInputStream(jarEntry));
                classReader.accept(classNode, 0);
                for (MethodNode methodNode : classNode.methods) {
                    AbstractInsnNode[] insnNodeArr = methodNode.instructions.toArray();
                    for (AbstractInsnNode insnNode : insnNodeArr) {
                        if (insnNode instanceof MethodInsnNode) {
                            MethodInsnNode methodInsnNode = (MethodInsnNode) insnNode;
                            if(methodInsnNode.owner.equals("java/lang/ProcessBuilder")) {
                                return new Result(true, "ProcessBuilder found in class: " + classNode.name +
                                        ", method: " + methodNode.name + ", instruction: " + methodInsnNode.owner + "." + methodInsnNode.name);
                            }
                            if (methodInsnNode.owner.equals("java/lang/Runtime") &&
                                    methodInsnNode.name.equals("getRuntime")) {
                                AbstractInsnNode nextInsnNode = insnNode.getNext();
                                while (nextInsnNode != null) {
                                    if(nextInsnNode instanceof MethodInsnNode) {
                                        MethodInsnNode nextMethodInsnNode = (MethodInsnNode) nextInsnNode;
                                        if(nextMethodInsnNode.owner.equals("java/lang/Runtime") &&
                                                nextMethodInsnNode.name.equals("exec")) {
                                            return new Result(true, "Runtime.getRuntime().exec() found in class: " + classNode.name +
                                                    ", method: " + methodNode.name + ", instruction: " + nextMethodInsnNode.owner + "." + nextMethodInsnNode.name);
                                        }
                                    }
                                    nextInsnNode = nextInsnNode.getNext();
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            return new Result();
        }
        return new Result();
    }

    @Override
    public String getCheckName() {
        return "System";
    }
}
