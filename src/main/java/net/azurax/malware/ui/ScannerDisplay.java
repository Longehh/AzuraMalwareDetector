package net.azurax.malware.ui;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.TextArea;
import javafx.scene.image.Image;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.DirectoryChooser;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import lombok.Getter;
import net.azurax.malware.api.check.IMalwareCheck;
import net.azurax.malware.api.handler.IScan;
import net.azurax.malware.handler.DirectoryScanHandler;
import net.azurax.malware.handler.FileScanHandler;
import net.azurax.malware.provider.CheckProvider;
import net.azurax.malware.result.Result;

import java.io.File;
import java.util.*;

public class ScannerDisplay extends Application {
    @Getter
    private TextArea resultArea;
    private File selectedFile;

    // List of Checks
    private CheckProvider checkProvider = new CheckProvider();
    private Map<IMalwareCheck, CheckBox> checkBoxMap = new HashMap<>();

    @Override
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setTitle("AzuraX | Malware Scanner");

        BorderPane root = new BorderPane();
        VBox centerPane = new VBox(10);
        centerPane.setPadding(new Insets(10));

        // File chooser button
        Button chooseFileButton = new Button("Choose File");
        chooseFileButton.setOnAction(e -> openFileChooser());

        Button scanFileButton = new Button("Run Scan");
        scanFileButton.setOnAction(e -> scanFile());

        Button chooseDirectoryButton = new Button("Select Directory");
        chooseDirectoryButton.setOnAction(e -> openDirectoryChooser());

        // Results area
        resultArea = new TextArea();
        resultArea.setEditable(false);
        resultArea.setPrefHeight(400);

        // Create checkboxes dynamically based on checks list
        VBox checkBoxContainer = new VBox(5);
        for (IMalwareCheck check : checkProvider.getMalwareChecks()) {
            CheckBox checkBox = new CheckBox(check.getCheckName());
            checkBoxMap.put(check, checkBox);
            checkBoxContainer.getChildren().add(checkBox);
        }

        // Layout the UI elements
        HBox buttonBox = new HBox(10, chooseFileButton, chooseDirectoryButton, scanFileButton);
        centerPane.getChildren().addAll(buttonBox, resultArea, checkBoxContainer);
        root.setCenter(centerPane);

        Image icon = new Image(Objects.requireNonNull(getClass().getResourceAsStream("/icon.png"))); // Make sure to provide the correct path

        // Set the icon for the stage
        primaryStage.getIcons().add(icon);
        // Set the scene and stage
        Scene scene = new Scene(root, 1000, 800);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void openFileChooser() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Select File to Scan");
        selectedFile = fileChooser.showOpenDialog(null);
        if (selectedFile != null) {
            resultArea.setText("Selected file: " + selectedFile.getAbsolutePath());
        }
    }

    private void openDirectoryChooser() {
        DirectoryChooser directoryChooser = new DirectoryChooser();
        directoryChooser.setTitle("Select Directory to Scan");
        selectedFile = directoryChooser.showDialog(null);
        if (selectedFile != null) {
            resultArea.setText("Selected directory: " + selectedFile.getAbsolutePath());
        }
    }

    private void scanFile() {
        if (selectedFile == null) {
            resultArea.setText("Please select a file or directory to scan first.");
            return;
        }

        List<IMalwareCheck> selectedChecks = new ArrayList<>();
        for (Map.Entry<IMalwareCheck, CheckBox> entry : checkBoxMap.entrySet()) {
            if (entry.getValue().isSelected()) {
                selectedChecks.add(entry.getKey());
            }
        }

        if (selectedChecks.isEmpty()) {
            resultArea.setText("Please select at least one check to scan the file with.");
            return;
        }

        if(selectedFile.isFile()) {
            IScan scan = new FileScanHandler(this, selectedChecks, selectedFile, false);
            scan.startScan();
        } else {
            IScan scan = new DirectoryScanHandler(this, selectedChecks, selectedFile);
            scan.startScan();
        }
    }
}
